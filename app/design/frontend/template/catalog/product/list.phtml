<?php
// $products = $this->getAllProducts();
// echo '<pre>';
// print_r($products);
// echo '</pre>';
// $attributes_name = $this->getAttributesName();
// $categories = $this->getCategories();
// $categories = $this->getAllCategories();
// echo '<pre>';
// print_r($categories);
// echo '</pre>';
// die;
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fashion Store - Product List</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   
  
</head>
<body id="main-body">
    <div class="main-container">
        <!-- <div class="filter-div">
            </div> -->
            
        <!-- <?php //echo $this->getChildHtml('filter'); ?> -->
        <?php echo $this->getChildHtml('products'); ?>
    
    </div>

    <!-- <script>

function showdata() {
            var selectedCategories = [];
            document.querySelectorAll('input[name="category[]"]:checked').forEach(function(checkbox) {
                selectedCategories.push(checkbox.value);
            });

            var formattedCategories = selectedCategories.join(',');
            var xhr = new XMLHttpRequest();
            console.log(123);
            xhr.open("GET", "http://localhost/mvc_copy/catalog/product/list/?categoryid=" + formattedCategories , true);
            xhr.onreadystatechange = function() {
                // console.log(xhr.readyState + "  "+ xhr.status);
                if (xhr.readyState == 4 && xhr.status == 200) {
                    // console.log(xhr.responseText);
                    document.getElementById("main-body").innerHTML = xhr.responseText;
                }
            };
            xhr.send();
        }
        // Wishlist functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Set up wishlist functionality
            document.querySelectorAll('.wishlist-button').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent triggering the product card click
                    const heart = this.querySelector('i');
                    if (heart.classList.contains('far')) {
                        heart.classList.remove('far');
                        heart.classList.add('fas');
                        heart.style.color = '#ff3f6c';
                    } else {
                        heart.classList.remove('fas');
                        heart.classList.add('far');
                        heart.style.color = '';
                    }
                });
            });
            
            // Simulating additional product images for hover effect (in a real application, this would come from the database)
            document.querySelectorAll('.product-card').forEach(card => {
                card.addEventListener('mouseenter', function() {
                    const img = this.querySelector('.product-image');
                    // Create a slight zoom effect on hover
                    img.style.transform = 'scale(1.05)';
                });
                
                card.addEventListener('mouseleave', function() {
                    const img = this.querySelector('.product-image');
                    img.style.transform = 'scale(1)';
                });
            });
        });

        // Add this to your existing script section at the bottom
document.addEventListener('DOMContentLoaded', function() {
    // Price filter functionality
    const priceFilter = document.querySelector('.price-filter');
    const priceFilterPopup = document.getElementById('price-filter-popup');
    
    // Show popup when clicking on the price filter chip
    priceFilter.addEventListener('click', function(e) {
        e.stopPropagation();
        // Position the popup below the filter chip
        const rect = priceFilter.getBoundingClientRect();
        priceFilterPopup.style.top = (rect.bottom + window.scrollY + 5) + 'px';
        priceFilterPopup.style.left = (rect.left + window.scrollX) + 'px';
        
        // Toggle visibility
        if (priceFilterPopup.style.display === 'none') {
            priceFilterPopup.style.display = 'block';
        } else {
            priceFilterPopup.style.display = 'none';
        }
    });
    
    // Hide popup when clicking outside
    document.addEventListener('click', function(e) {
        if (!priceFilterPopup.contains(e.target) && !priceFilter.contains(e.target)) {
            priceFilterPopup.style.display = 'none';
        }
    });
    
    // Implement price range slider functionality
    const minPriceInput = document.getElementById('min-price');
    const maxPriceInput = document.getElementById('max-price');
    const minSlider = document.getElementById('price-slider-min');
    const maxSlider = document.getElementById('price-slider-max');
    const priceRangeDisplay = document.querySelector('.price-range-display');
    const applyButton = document.getElementById('apply-price-filter');
    const resetButton = document.getElementById('reset-price-filter');
    
    // Sync input fields with sliders
    minSlider.addEventListener('input', function() {
        minPriceInput.value = this.value;
        if (parseInt(minSlider.value) > parseInt(maxSlider.value)) {
            minSlider.value = maxSlider.value;
            minPriceInput.value = maxSlider.value;
        }
    });
    
    maxSlider.addEventListener('input', function() {
        maxPriceInput.value = this.value;
        if (parseInt(maxSlider.value) < parseInt(minSlider.value)) {
            maxSlider.value = minSlider.value;
            maxPriceInput.value = minSlider.value;
        }
    });
    
    // Sync sliders with input fields
    minPriceInput.addEventListener('input', function() {
        minSlider.value = this.value;
    });
    
    maxPriceInput.addEventListener('input', function() {
        maxSlider.value = this.value;
    });
    
    // Apply button functionality
    applyButton.addEventListener('click', function() {
        const min = minPriceInput.value;
        const max = maxPriceInput.value;
        if (min && max) {
            priceRangeDisplay.textContent = `Rs. ${min} - Rs. ${max}`;
        } else if (min) {
            priceRangeDisplay.textContent = `Rs. ${min}+`;
        } else if (max) {
            priceRangeDisplay.textContent = `Up to Rs. ${max}`;
        }
        priceFilterPopup.style.display = 'none';
        
        // Here you would normally filter the products based on price
        // This would require an AJAX call or page reload with query parameters
    });
    
    // Reset button functionality
    resetButton.addEventListener('click', function() {
        minPriceInput.value = '';
        maxPriceInput.value = '';
        minSlider.value = minSlider.min;
        maxSlider.value = maxSlider.max;
        priceRangeDisplay.textContent = 'All';
        priceFilterPopup.style.display = 'none';
        
        // Reset the product display to show all products
    });
});
    </script> -->
</body>
</html>